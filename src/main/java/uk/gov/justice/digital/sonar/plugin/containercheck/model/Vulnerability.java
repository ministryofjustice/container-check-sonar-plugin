package uk.gov.justice.digital.sonar.plugin.containercheck.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Collection;
import java.util.Collections;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;
import org.sonar.api.utils.log.Logger;
import org.sonar.api.utils.log.Loggers;

/**
 * Models the vulnerability object created by a Trivy scan.
 *
 * @see <a href="https://github.com/aquasecurity/trivy">Trivy</a> ink
 */
@ToString
@EqualsAndHashCode
@Getter
@JsonIgnoreProperties(ignoreUnknown = true)
public class Vulnerability {

    private static final Logger LOGGER = Loggers.get(Vulnerability.class);

    private final String id;
    private final String source;
    private final Severity severity;
    private final String installedVersion;
    private final String fixedVersion;
    private final String title;
    private final String description;
    private final Collection<String> references;

    @SuppressWarnings("checkstyle:ParameterNumber")
    @JsonCreator
    public Vulnerability(@JsonProperty(value = "VulnerabilityID", required = true) final String id,
                         @JsonProperty(value = "PkgName", required = true) final String source,
                         @JsonProperty(value = "InstalledVersion", required = true) final String installedVersion,
                         @JsonProperty(value = "FixedVersion") final String fixedVersion,
                         @JsonProperty(value = "Title") final String title,
                         @JsonProperty(value = "Description", required = true) final String description,
                         @JsonProperty(value = "Severity", required = true) final String severity,
                         @JsonProperty(value = "References") final Collection<String> references) {
        this.id = id != null ? id.trim() : "";
        this.source = source != null ? source.trim() : "";
        this.installedVersion = installedVersion != null ? installedVersion.trim() : "";
        this.fixedVersion = fixedVersion != null ? fixedVersion.trim() : "";
        this.title = title != null ? title.trim() : "";
        this.severity = Severity.valueOf(severity.trim().toUpperCase());
        this.description = description != null ? description.trim() : "";
        this.references = references == null ? Collections.emptyList() : references;
    }

    /**
     * Gets the vulnerability as a string which will be displayed in SonarQube.
     * @return  String
     */
    public String toSonarMessage() {
        final StringBuilder sb = new StringBuilder(200);
        sb.append("Package: ").append(getSource()).append(" | ");
        sb.append("ID: ").append(getId()).append(" | ");
        sb.append("Installed version: ").append(getInstalledVersion()).append(" | ");
        sb.append("Fixed in version: ").append(getFixedVersion().isEmpty() ? "N/A" : getFixedVersion()).append(" | ");
        sb.append("Description: ").append(getDescription());
        return sb.toString();
    }
}
